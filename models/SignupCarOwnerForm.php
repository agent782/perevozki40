<?php
/**
 * Created by PhpStorm.
 * User: Admin
 * Date: 15.05.2018
 * Time: 14:09
 */

namespace app\models;

use Yii;
use yii\base\Model;
use yii\web\UploadedFile;
use yii\helpers\FileHelper;
use yii\imagine\Image;


class SignupCarOwnerForm extends Model
{
    const SCENARIO_WITHOUT_DRIVER_LICENSE = 'without_driver_license';

    public $id_user = null;
    public $bithday;
    public $photo;
    public $passport_number;
    public $passport_date;
    public $passport_place;
    public $email;
    public $email2;
    public $phone2;
    public $country;
    public  $reg_address;
    public $assignAgreement = false;
    public $is_driver;
    public $id_driver_licence;
    public $driver_licence_number;
    public $driver_licence_date;
    public $driver_licence_place;


    public function rules()
    {
        return [
            [['id_user'], 'integer'],
            [['email', 'bithday', 'country', 'passport_number', 'passport_place', 'passport_date',
                'reg_address', 'assignAgreement'], 'required'],
            [['is_driver'], 'required', 'message' => 'Выберите один из вариантов'],
//            ['phone2', 'match', 'pattern' => '/^\+7\([0-9]{3}\)[0-9]{3}\-[0-9]{2}\-[0-9]{2}$/'],
            ['phone2',  'string', 'length' => [10], 'message' => 'Некорректный номер', 'tooLong' => 'Некорректный номер','tooShort' => 'Некорректный номер',],
            [['passport_place','driver_licence_place'], 'string', 'length' => [10, 100]],
//            ['passport_number', 'unique', 'targetClass' => 'app\models\Passport', 'targetAttribute' => 'id', 'message' => 'Такой паспорт уже заренистрирован в системе'],
//            ['passport_number', 'exist', 'targetClass' => 'app\models\Passport', 'targetAttribute' => 'id', 'message' => 'Такой паспорт уже заренистрирован в системе'],
            [['id_driver_licence'], 'integer'],
            [['photo'], 'image', 'extensions' => 'jpg'],
            [['passport_number', 'driver_licence_number', 'reg_address'], 'string', 'max' => 255],
            [['email', 'email2'], 'email'],
            ['email', 'validateUniqueEmail'],
            [['bithday', 'passport_date'], 'date', 'format' => 'php:d.m.Y'],
            [['bithday'], 'date', 'format' => 'php:d.m.Y',
                'max' => (time() - 60*60*24*365*18), 'min' => (time() - 60*60*24*365*100),
                'tooBig' => 'Вам должно быть не менее 18 лет',
                'tooSmall' => 'Максимальный возраст - 100 лет'],
            [['passport_date','driver_licence_date'], 'date', 'format' => 'php:d.m.Y',
                'max' => (time()), 'min' => (time() - 60*60*24*365*50),
                'tooBig' => 'Вы из будущего?)',
                'tooSmall' => 'Проверьте дату.'],
            ['assignAgreement', 'compare', 'compareValue' => 1, 'operator' => '==',
                'message' => 'Вы должны быть согласны с условиями использования сервиса.'],
            [['driver_licence_date', 'driver_licence_number', 'driver_licence_place'], 'validateDriverLicense', 'skipOnEmpty' => false]
        ];
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios[self::SCENARIO_WITHOUT_DRIVER_LICENSE] = [
            'bithday', 'photo', 'passport_number', 'passport_date', 'passport_place',
            'email2', 'phone2', 'country', 'reg_address', 'assignAgreement', 'is_driver',
        ];
        return $scenarios;
    }

    public function attributeLabels()
    {
        return [
            'bithday' => 'Дата рождения',
            'passport_series' => 'Серия паспорта',
            'passport_number' => 'Номер паспорта',
            'passport_date' => 'Дата выдачи',
            'passport_place' => 'Кем выдан',
            'photo' => 'Фото профиля',
            'phone2' => 'Дополнительный телефон',
            'email' => 'Email',
            'email2' => 'Дополнительный email',
            'country' => 'Гражданство',
            'reg_address' => 'Адрес регистрации',
            'driver_licence_number' => 'Номер водительского удостоверения',
            'driver_licence_date' => 'Дата выдачи ВУ',
            'driver_licence_place' => 'Кем выдано ВУ',

        ];
    }

    public function validateUniqueEmail($attribute){
        if(User::find()->where(['email' => $this->$attribute])
            ->andWhere(['<>', 'id' , $this->id_user])->one()
        )
            $this->addError($attribute, 'Пользователь с таким email уже существует. Укажите другой адрес или войдите под пользователем с этим email');
    }

    public function beforeValidate()
    {
//        if(!$this->is_driver) $this->scenario=self::SCENARIO_WITHOUT_DRIVER_LICENSE;
        $this->phone2 = mb_ereg_replace("[^0-9]",'',$this->phone2);
        $this->passport_number = mb_ereg_replace("[^0-9]",'',$this->passport_number);
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function validateDriverLicense($attribute){
        if($this->is_driver && !$this->$attribute) {
            $this->addError($attribute, 'Необходимо заполнить "' . self::getAttributeLabel($attribute) . '"');
        }
    }

    public function uploadPhoto(){
        if($this->validate() && $this->photo){
            $dir = Yii::getAlias('@userPhotoDir').'/';
            $filename = Yii::$app->user->getId() . '.' . $this->photo->extension;
            $this->photo->saveAs($dir.$filename);
            Image::autorotate($dir.$filename)->save();
            Image::thumbnail($dir.$filename, 768, null)->save();
            return $filename;
        }else{
            return null;

        }
    }


    public function saveProfile()
    {
        $User = Yii::$app->user->identity;
        if(!$User) return false;
        $User->email = $this->email;
        if(!$User->save(false)) return false;

        $modelProfile = $User->profile;
        if(!$modelProfile) return false;

        $this->photo = UploadedFile::getInstance($this, 'photo');
        if($this->photo) {
            $modelProfile->photo = $this->uploadPhoto();
        }
        $modelProfile->phone2 = $this->phone2;
        $modelProfile->email2 = $this->email2;
        $modelProfile->bithday = ($this->bithday);
        $modelProfile->reg_address = $this->reg_address;

        if($modelProfile->save()) {
            $auth = Yii::$app->authManager;
            $role = $auth->getRole('car_owner');
            $auth->revokeAll($modelProfile->id_user);
            $auth->assign($role, $modelProfile->id_user);

            if($modelPassport = $this->savePassport($modelProfile->id_passport)) {
                $modelProfile->id_passport = $modelPassport->id;
            }
            if($this->is_driver) {
                if ($modelProfile->id_driver_license = $this->saveDriverLicense($modelProfile->id_driver_license)) {
                    $modelProfile->is_driver = $this->is_driver;
                }
            }
            if($modelProfile->save()) {
                return $modelProfile;
            }
            $role = $auth->getRole('user');
            $auth->revokeAll($modelProfile->id_user);
            $auth->assign($role, $modelProfile->id_user);
        }
        return false;
    }
    public function savePassport($id)
    {
        $modelPassport = Passport::find()->where(['id' => $id])->one();
        if(!$modelPassport) $modelPassport = new Passport();
        $modelPassport->number = $this->passport_number;
        $modelPassport->date = $this->passport_date;
        $modelPassport->place = $this->passport_place;
        $modelPassport->country = $this->country;
        if ($modelPassport->save()) {
            return $modelPassport;
        }
        return false;
    }
    public function saveDriverLicense($id){
        if($id){
            $DriverLicense = DriverLicense::findOne($id);
            if(!$DriverLicense) $DriverLicencse = new DriverLicense();
        } else $DriverLicense = new DriverLicense();
        $DriverLicense->number = $this->driver_licence_number;
        $DriverLicense->date = $this->driver_licence_date;
        $DriverLicense->place = $this->driver_licence_place;
        if($DriverLicense->number && $DriverLicense->date && $DriverLicense->place)
        {
            if($DriverLicense->save()) return $DriverLicense->id;
        }

        return false;
    }


}